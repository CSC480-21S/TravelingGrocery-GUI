{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\CSC480\\\\TravelingGrocery-GUI\\\\front-end\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport reducers from \"./reducers\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { GoogleLogin } from \"react-google-login\"; //Justin: Still have to figure out how this redux-persist Works\n//Redux-persist allows to store the redux store in local storage and then retrieve the information later\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, reducers);\nconst store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(thunk)));\nconst persistor = persistStore(store);\nconsole.log(\"Store: \" + store.getState().lists); //this is just stupidity at its finest\n\nconst onSuccess = response => {\n  console.log(`Login Success: currentUser ${response.profileObj}`); //console.log('Loaded: ' + loaded)\n\n  dispatch(send_Google_User_info(response));\n  setTest(response.profileObj.name);\n}; //When login is a failute\n\n\nconst onFailure = response => {\n  console.log(\"Error: \" + response);\n};\n\nconst client_id = \"534704394140-vgqdcmbmel4gn1bfa7g3hd6h70qm5c6m.apps.googleusercontent.com\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(PersistGate, {\n      loading: null,\n      persistor: persistor,\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        clientId: client_id,\n        buttonText: \"Login\",\n        onSuccess: onSuccess,\n        onFailure: onFailure,\n        cookiePolicy: \"single_host_origin\",\n        isSignedIn: true,\n        redirectUri: \"http://localhost:3000/home\",\n        children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 2\n}, this), document.getElementById(\"root\")); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals","map":{"version":3,"sources":["D:/Projects/CSC480/TravelingGrocery-GUI/front-end/src/index.js"],"names":["React","ReactDOM","Provider","thunk","createStore","applyMiddleware","compose","composeWithDevTools","persistStore","persistReducer","storage","PersistGate","reducers","App","GoogleLogin","persistConfig","key","persistedReducer","store","persistor","console","log","getState","lists","onSuccess","response","profileObj","dispatch","send_Google_User_info","setTest","name","onFailure","client_id","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,WAAT,QAA4B,oBAA5B,C,CAEA;AACA;;;AACA,MAAMC,aAAa,GAAG;AACrBC,EAAAA,GAAG,EAAE,MADgB;AAErBN,EAAAA;AAFqB,CAAtB;AAIA,MAAMO,gBAAgB,GAAGR,cAAc,CAACM,aAAD,EAAgBH,QAAhB,CAAvC;AACA,MAAMM,KAAK,GAAGd,WAAW,CACxBa,gBADwB,EAExBV,mBAAmB,CAACF,eAAe,CAACF,KAAD,CAAhB,CAFK,CAAzB;AAIA,MAAMgB,SAAS,GAAGX,YAAY,CAACU,KAAD,CAA9B;AAEAE,OAAO,CAACC,GAAR,CAAY,YAAYH,KAAK,CAACI,QAAN,GAAiBC,KAAzC,E,CACA;;AAEA,MAAMC,SAAS,GAAIC,QAAD,IAAc;AAC/BL,EAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BI,QAAQ,CAACC,UAAW,EAA9D,EAD+B,CAE/B;;AACAC,EAAAA,QAAQ,CAACC,qBAAqB,CAACH,QAAD,CAAtB,CAAR;AACAI,EAAAA,OAAO,CAACJ,QAAQ,CAACC,UAAT,CAAoBI,IAArB,CAAP;AACA,CALD,C,CAMA;;;AACA,MAAMC,SAAS,GAAIN,QAAD,IAAc;AAC/BL,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYI,QAAxB;AACA,CAFD;;AAIA,MAAMO,SAAS,GACd,0EADD;AAGA/B,QAAQ,CAACgC,MAAT,eACC,QAAC,KAAD,CAAO,UAAP;AAAA,yBACC,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEf,KAAjB;AAAA,2BACC,QAAC,WAAD;AAAa,MAAA,OAAO,EAAE,IAAtB;AAA4B,MAAA,SAAS,EAAEC,SAAvC;AAAA,6BACC,QAAC,WAAD;AACC,QAAA,QAAQ,EAAEa,SADX;AAEC,QAAA,UAAU,EAAC,OAFZ;AAGC,QAAA,SAAS,EAAER,SAHZ;AAIC,QAAA,SAAS,EAAEO,SAJZ;AAKC,QAAA,YAAY,EAAE,oBALf;AAMC,QAAA,UAAU,EAAE,IANb;AAOC,QAAA,WAAW,EAAE,4BAPd;AAAA,+BASC,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AATD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,QADD,EAkBCG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAlBD,E,CAqBA;AACA;AACA","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nimport reducers from \"./reducers\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport { GoogleLogin } from \"react-google-login\";\r\n\r\n//Justin: Still have to figure out how this redux-persist Works\r\n//Redux-persist allows to store the redux store in local storage and then retrieve the information later\r\nconst persistConfig = {\r\n\tkey: \"root\",\r\n\tstorage,\r\n};\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\nconst store = createStore(\r\n\tpersistedReducer,\r\n\tcomposeWithDevTools(applyMiddleware(thunk))\r\n);\r\nconst persistor = persistStore(store);\r\n\r\nconsole.log(\"Store: \" + store.getState().lists);\r\n//this is just stupidity at its finest\r\n\r\nconst onSuccess = (response) => {\r\n\tconsole.log(`Login Success: currentUser ${response.profileObj}`);\r\n\t//console.log('Loaded: ' + loaded)\r\n\tdispatch(send_Google_User_info(response));\r\n\tsetTest(response.profileObj.name);\r\n};\r\n//When login is a failute\r\nconst onFailure = (response) => {\r\n\tconsole.log(\"Error: \" + response);\r\n};\r\n\r\nconst client_id =\r\n\t\"534704394140-vgqdcmbmel4gn1bfa7g3hd6h70qm5c6m.apps.googleusercontent.com\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Provider store={store}>\r\n\t\t\t<PersistGate loading={null} persistor={persistor}>\r\n\t\t\t\t<GoogleLogin\r\n\t\t\t\t\tclientId={client_id}\r\n\t\t\t\t\tbuttonText=\"Login\"\r\n\t\t\t\t\tonSuccess={onSuccess}\r\n\t\t\t\t\tonFailure={onFailure}\r\n\t\t\t\t\tcookiePolicy={\"single_host_origin\"}\r\n\t\t\t\t\tisSignedIn={true}\r\n\t\t\t\t\tredirectUri={\"http://localhost:3000/home\"}\r\n\t\t\t\t>\r\n\t\t\t\t\t<App />\r\n\t\t\t\t</GoogleLogin>\r\n\t\t\t</PersistGate>\r\n\t\t</Provider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"]},"metadata":{},"sourceType":"module"}