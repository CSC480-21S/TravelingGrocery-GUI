{"ast":null,"code":"import * as api from \"../api/api\";\nimport * as TYPES from \"./actionTypes\"; //Create a new List\n\nexport const create_List = (list, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createList(list, id);\n    console.log(`data: ${data}`);\n    dispatch({\n      type: TYPES.CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; //Get all Lists\n\nexport const fetchLists = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getLists(id);\n    console.log(\"FetchLists data: \" + data);\n    dispatch({\n      type: TYPES.FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; //Send a List to a Component\n\nexport const sendList = list => dispatch => {\n  try {\n    dispatch({\n      type: TYPES.SEND_LIST,\n      payload: list\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; //Send Google Info to a Component\n\nexport const send_Google_User_info = profile => dispatch => {\n  try {\n    console.log(\"From Actions: \" + profile);\n    dispatch({\n      type: TYPES.SEND_GOOGLE_INFO,\n      payload: profile\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; //Fecth items of a list\n\nexport const fecth_list_items = (user_id, list_id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetch_items(user_id, list_id);\n    console.log(`Items from Actions: ${JSON.stringify(data)}`);\n    dispatch({\n      type: TYPES.FETCH_LIST_ITEMS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["D:/Projects/CSC480/TravelingGrocery-GUI/front-end/src/actions/actions.js"],"names":["api","TYPES","create_List","list","id","dispatch","data","createList","console","log","type","CREATE","payload","error","message","fetchLists","getLists","FETCH_ALL","sendList","SEND_LIST","send_Google_User_info","profile","SEND_GOOGLE_INFO","fecth_list_items","user_id","list_id","fetch_items","JSON","stringify","FETCH_LIST_ITEMS"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,YAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,EAAP,KAAc,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,GAAG,CAACO,UAAJ,CAAeJ,IAAf,EAAqBC,EAArB,CAAvB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAQH,IAAK,EAA1B;AACAD,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAET,KAAK,CAACU,MAAd;AAAsBC,MAAAA,OAAO,EAAEN;AAA/B,KAAD,CAAR;AACA,GAJD,CAIE,OAAOO,KAAP,EAAc;AACfL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,OAAlB;AACA;AACD,CARM,C,CASP;;AACA,OAAO,MAAMC,UAAU,GAAIX,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACrD,MAAI;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,GAAG,CAACgB,QAAJ,CAAaZ,EAAb,CAAvB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBH,IAAlC;AACAD,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAET,KAAK,CAACgB,SAAd;AAAyBL,MAAAA,OAAO,EAAEN;AAAlC,KAAD,CAAR;AACA,GAJD,CAIE,OAAOO,KAAP,EAAc;AACfL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,OAAlB;AACA;AACD,CARM,C,CASP;;AACA,OAAO,MAAMI,QAAQ,GAAIf,IAAD,IAAWE,QAAD,IAAc;AAC/C,MAAI;AACHA,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAET,KAAK,CAACkB,SAAd;AAAyBP,MAAAA,OAAO,EAAET;AAAlC,KAAD,CAAR;AACA,GAFD,CAEE,OAAOU,KAAP,EAAc;AACfL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,OAAlB;AACA;AACD,CANM,C,CAOP;;AACA,OAAO,MAAMM,qBAAqB,GAAIC,OAAD,IAAchB,QAAD,IAAc;AAC/D,MAAI;AACHG,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBY,OAA/B;AACAhB,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAET,KAAK,CAACqB,gBAAd;AAAgCV,MAAAA,OAAO,EAAES;AAAzC,KAAD,CAAR;AACA,GAHD,CAGE,OAAOR,KAAP,EAAc;AACfL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,OAAlB;AACA;AACD,CAPM,C,CAQP;;AACA,OAAO,MAAMS,gBAAgB,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAOpB,QAAP,IAAoB;AACzE,MAAI;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,GAAG,CAAC0B,WAAJ,CAAgBF,OAAhB,EAAyBC,OAAzB,CAAvB;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBkB,IAAI,CAACC,SAAL,CAAetB,IAAf,CAAqB,EAAxD;AACAD,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAET,KAAK,CAAC4B,gBAAd;AAAgCjB,MAAAA,OAAO,EAAEN;AAAzC,KAAD,CAAR;AACA,GAJD,CAIE,OAAOO,KAAP,EAAc;AACfL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,OAAlB;AACA;AACD,CARM","sourcesContent":["import * as api from \"../api/api\";\r\nimport * as TYPES from \"./actionTypes\";\r\n\r\n//Create a new List\r\nexport const create_List = (list, id) => async (dispatch) => {\r\n\ttry {\r\n\t\tconst { data } = await api.createList(list, id);\r\n\t\tconsole.log(`data: ${data}`);\r\n\t\tdispatch({ type: TYPES.CREATE, payload: data });\r\n\t} catch (error) {\r\n\t\tconsole.log(error.message);\r\n\t}\r\n};\r\n//Get all Lists\r\nexport const fetchLists = (id) => async (dispatch) => {\r\n\ttry {\r\n\t\tconst { data } = await api.getLists(id);\r\n\t\tconsole.log(\"FetchLists data: \" + data);\r\n\t\tdispatch({ type: TYPES.FETCH_ALL, payload: data });\r\n\t} catch (error) {\r\n\t\tconsole.log(error.message);\r\n\t}\r\n};\r\n//Send a List to a Component\r\nexport const sendList = (list) => (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: TYPES.SEND_LIST, payload: list });\r\n\t} catch (error) {\r\n\t\tconsole.log(error.message);\r\n\t}\r\n};\r\n//Send Google Info to a Component\r\nexport const send_Google_User_info = (profile) => (dispatch) => {\r\n\ttry {\r\n\t\tconsole.log(\"From Actions: \" + profile);\r\n\t\tdispatch({ type: TYPES.SEND_GOOGLE_INFO, payload: profile });\r\n\t} catch (error) {\r\n\t\tconsole.log(error.message);\r\n\t}\r\n};\r\n//Fecth items of a list\r\nexport const fecth_list_items = (user_id, list_id) => async (dispatch) => {\r\n\ttry {\r\n\t\tconst { data } = await api.fetch_items(user_id, list_id);\r\n\t\tconsole.log(`Items from Actions: ${JSON.stringify(data)}`);\r\n\t\tdispatch({ type: TYPES.FETCH_LIST_ITEMS, payload: data });\r\n\t} catch (error) {\r\n\t\tconsole.log(error.message);\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}