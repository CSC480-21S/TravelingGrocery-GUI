{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\CSC480\\\\TravelingGrocery-GUI\\\\front-end\\\\src\\\\components\\\\Lists\\\\Lists.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\"; //Redux\n\nimport { useSelector, useDispatch } from \"react-redux\"; //Material UI\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\"; //Components\n\nimport makeStyles from \"./Lists_styles\";\nimport Regular_List from \"./Regular_List/Regular_List\";\nimport Edit_List from \"./Edit_List/Edit_List\"; //Actions\n\nimport { fecth_list_items } from \"../../actions/actions\";\nimport { fetch_store_items } from \"../../actions/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Lists = () => {\n  _s();\n\n  const styles = makeStyles();\n  const items = useSelector(state => state.lists); //get items\n\n  const list_Name = useSelector(state => state.homePage.name); //gets name of the list\n\n  const user = useSelector(state => state.login.profileObj); //gets user information from reducer\n\n  const [isEditable, set_isEditable] = useState(false);\n  const dispatch = useDispatch(); //Dispatch an action to the reducers\n  //console.log(`List from Lists Component: \\n ${JSON.stringify(list_Name)}`);\n  //console.log(\"Selector: \" + JSON.stringify(selector));\n  //console.log(`Items from Lists Component: \\n ${JSON.stringify(items)}`);\n\n  useEffect(() => {\n    dispatch(fecth_list_items(user.email, list_Name));\n    return () => {\n      //Update the list of item when the componenet disassembles\n      dispatch(fecth_list_items(user.email, list_Name));\n    };\n  }, [dispatch]);\n  useEffect(() => {\n    dispatch(fetch_store_items());\n  }, []); //======================================================================\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: styles.top_container,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            className: styles.userName,\n            children: [\" Hi \", user.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 9,\n          className: styles.buttons,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            fontSize: \"small\",\n            startIcon: /*#__PURE__*/_jsxDEV(ShareIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this),\n            className: styles.topIconButton1,\n            children: \"Share\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            fontSize: \"small\",\n            startIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this),\n            className: styles.topIconButton2,\n            onClick: () => set_isEditable(!isEditable),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isEditable ? /*#__PURE__*/_jsxDEV(Edit_List, {\n        items: items,\n        set_isEditable: set_isEditable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(Regular_List, {\n        items: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Lists, \"49AeSK4lf9Jfl1FeD4RfBwL+MBk=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Lists;\nexport default Lists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lists\");","map":{"version":3,"sources":["D:/Projects/CSC480/TravelingGrocery-GUI/front-end/src/components/Lists/Lists.js"],"names":["React","useEffect","useState","useSelector","useDispatch","Typography","Button","Grid","ShareIcon","EditIcon","DeleteForeverIcon","makeStyles","Regular_List","Edit_List","fecth_list_items","fetch_store_items","Lists","styles","items","state","lists","list_Name","homePage","name","user","login","profileObj","isEditable","set_isEditable","dispatch","email","top_container","userName","buttons","topIconButton1","topIconButton2"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\n//Redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n//Material UI\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ShareIcon from \"@material-ui/icons/Share\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\n//Components\r\nimport makeStyles from \"./Lists_styles\";\r\nimport Regular_List from \"./Regular_List/Regular_List\";\r\nimport Edit_List from \"./Edit_List/Edit_List\";\r\n//Actions\r\nimport { fecth_list_items } from \"../../actions/actions\";\r\nimport { fetch_store_items } from \"../../actions/actions\";\r\n\r\nconst Lists = () => {\r\n\tconst styles = makeStyles();\r\n\tconst items = useSelector((state) => state.lists); //get items\r\n\tconst list_Name = useSelector((state) => state.homePage.name); //gets name of the list\r\n\tconst user = useSelector((state) => state.login.profileObj); //gets user information from reducer\r\n\tconst [isEditable, set_isEditable] = useState(false);\r\n\r\n\tconst dispatch = useDispatch(); //Dispatch an action to the reducers\r\n\r\n\t//console.log(`List from Lists Component: \\n ${JSON.stringify(list_Name)}`);\r\n\t//console.log(\"Selector: \" + JSON.stringify(selector));\r\n\t//console.log(`Items from Lists Component: \\n ${JSON.stringify(items)}`);\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(fecth_list_items(user.email, list_Name));\r\n\r\n\t\treturn () => {\r\n\t\t\t//Update the list of item when the componenet disassembles\r\n\t\t\tdispatch(fecth_list_items(user.email, list_Name));\r\n\t\t};\r\n\t}, [dispatch]);\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(fetch_store_items());\r\n\t}, []);\r\n\t//======================================================================\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div>\r\n\t\t\t\t<Grid container className={styles.top_container}>\r\n\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t<Typography className={styles.userName}> Hi {user.name}</Typography>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs={9} className={styles.buttons}>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tfontSize=\"small\"\r\n\t\t\t\t\t\t\tstartIcon={<ShareIcon />}\r\n\t\t\t\t\t\t\tclassName={styles.topIconButton1}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tShare\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tfontSize=\"small\"\r\n\t\t\t\t\t\t\tstartIcon={<EditIcon />}\r\n\t\t\t\t\t\t\tclassName={styles.topIconButton2}\r\n\t\t\t\t\t\t\tonClick={() => set_isEditable(!isEditable)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tEdit\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{isEditable ? (\r\n\t\t\t\t\t<Edit_List items={items} set_isEditable={set_isEditable} />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Regular_List items={items} />\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Lists;\r\n"]},"metadata":{},"sourceType":"module"}