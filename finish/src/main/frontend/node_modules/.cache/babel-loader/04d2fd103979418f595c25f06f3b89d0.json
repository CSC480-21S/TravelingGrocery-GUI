{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React_OpenLiberty\\\\guide-rest-client-reactjs\\\\finish\\\\src\\\\main\\\\frontend\\\\src\\\\components\\\\Items\\\\Items.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Button from \"@material-ui/core/Button\";\nimport { useHistory } from \"react-router-dom\"; //Local imports\n\nimport Item from \"./Item/Item\";\nimport { fetch_store_items } from \"../../actions/actions\";\nimport { set_list_to_be_updated } from \"../../actions/actions\";\nimport Search_Bar from \"./Search_Bar/Search_Bar\";\nimport makeStyles from \"./Items_styles\";\n\nconst Items = () => {\n  const dispatch = useDispatch();\n  const styles = makeStyles();\n  const history = useHistory();\n  const list_Name = useSelector(state => state.homePage.name); //NAME OF THE LIST THAT WE ARE GOING TO ADD ITEMS\n\n  const username = useSelector(state => state.login.profileObj.email);\n  const [filtered_storeList, set_Filtered_storeList] = useState([]); //filetered items\n  //LIST TO BE UPDATED\n\n  const [items_to_be_updated, set_ItemsToBeUpdated] = useState(useSelector(state => state.list_toUpdate)); //STORE ITEMS\n\n  const [items, set_items] = useState(useSelector(state => state.store_list.map(item => {\n    item.listId = list_Name;\n    item.userId = username;\n    item.count = 1;\n    item.id = Math.random().toString(36).substr(2, 9);\n    item.isChecked = false;\n    item.isStoreItem = true;\n    return item;\n  }))); // IF CHECKED ADD THE ITEMS TO THE LIST TO BE UPDATED\n\n  const handleAdd = () => {\n    items.map(item => {\n      if (item.isChecked === true) {\n        try {\n          item.isChecked = false;\n          items_to_be_updated.push(item); //push returns the new index of the array\n\n          set_ItemsToBeUpdated(items_to_be_updated);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }); //console.log(`ITMES TO BE ADDED: ${JSON.stringify(items)}`);\n\n    history.goBack();\n    dispatch(set_list_to_be_updated(items_to_be_updated));\n  }; //====================================================\n  //FETCH STORE ITEMS\n\n\n  useEffect(() => {\n    dispatch(fetch_store_items());\n  }, [dispatch]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Search_Bar, {\n    items: items,\n    set_Filtered_storeList: set_Filtered_storeList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    style: {\n      fontFamily: \"Inter\",\n      fontWeight: \"600\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Adding Items to \", list_Name)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, filtered_storeList.length === 0 ? items.map(item => React.createElement(Item, {\n    key: item.id,\n    item: item,\n    items: items,\n    set_items: set_items,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })) : filtered_storeList.map(item => React.createElement(Item, {\n    key: item.id,\n    item: item,\n    items: items,\n    set_items: set_items,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: styles.add,\n    onClick: handleAdd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Add Items\")));\n};\n\nexport default Items;","map":{"version":3,"sources":["D:/Projects/React_OpenLiberty/guide-rest-client-reactjs/finish/src/main/frontend/src/components/Items/Items.js"],"names":["React","useEffect","useState","Typography","useDispatch","useSelector","Button","useHistory","Item","fetch_store_items","set_list_to_be_updated","Search_Bar","makeStyles","Items","dispatch","styles","history","list_Name","state","homePage","name","username","login","profileObj","email","filtered_storeList","set_Filtered_storeList","items_to_be_updated","set_ItemsToBeUpdated","list_toUpdate","items","set_items","store_list","map","item","listId","userId","count","id","Math","random","toString","substr","isChecked","isStoreItem","handleAdd","push","error","console","log","goBack","text","fontFamily","fontWeight","length","add"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CACA;;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,sBAAT,QAAuC,uBAAvC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AACnB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,MAAM,GAAGH,UAAU,EAAzB;AACA,QAAMI,OAAO,GAAGT,UAAU,EAA1B;AACA,QAAMU,SAAS,GAAGZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeC,IAA3B,CAA7B,CAJmB,CAI4C;;AAC/D,QAAMC,QAAQ,GAAGhB,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACI,KAAN,CAAYC,UAAZ,CAAuBC,KAAnC,CAA5B;AACA,QAAM,CAACC,kBAAD,EAAqBC,sBAArB,IAA+CxB,QAAQ,CAAC,EAAD,CAA7D,CANmB,CAMgD;AACnE;;AACA,QAAM,CAACyB,mBAAD,EAAsBC,oBAAtB,IAA8C1B,QAAQ,CAC3DG,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACW,aAAlB,CADgD,CAA5D,CARmB,CAWnB;;AACA,QAAM,CAACC,KAAD,EAAQC,SAAR,IAAqB7B,QAAQ,CAClCG,WAAW,CAAEa,KAAD,IACXA,KAAK,CAACc,UAAN,CAAiBC,GAAjB,CAAsBC,IAAD,IAAU;AAC9BA,IAAAA,IAAI,CAACC,MAAL,GAAclB,SAAd;AACAiB,IAAAA,IAAI,CAACE,MAAL,GAAcf,QAAd;AACAa,IAAAA,IAAI,CAACG,KAAL,GAAa,CAAb;AACAH,IAAAA,IAAI,CAACI,EAAL,GAAUC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAV;AACAR,IAAAA,IAAI,CAACS,SAAL,GAAiB,KAAjB;AACAT,IAAAA,IAAI,CAACU,WAAL,GAAmB,IAAnB;AACA,WAAOV,IAAP;AACA,GARD,CADU,CADuB,CAAnC,CAZmB,CA0BnB;;AACA,QAAMW,SAAS,GAAG,MAAM;AACvBf,IAAAA,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;AACnB,UAAIA,IAAI,CAACS,SAAL,KAAmB,IAAvB,EAA6B;AAC5B,YAAI;AACHT,UAAAA,IAAI,CAACS,SAAL,GAAiB,KAAjB;AACAhB,UAAAA,mBAAmB,CAACmB,IAApB,CAAyBZ,IAAzB,EAFG,CAE6B;;AAChCN,UAAAA,oBAAoB,CAACD,mBAAD,CAApB;AACA,SAJD,CAIE,OAAOoB,KAAP,EAAc;AACfC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACD;AACD,KAVD,EADuB,CAYvB;;AACA/B,IAAAA,OAAO,CAACkC,MAAR;AACApC,IAAAA,QAAQ,CAACJ,sBAAsB,CAACiB,mBAAD,CAAvB,CAAR;AACA,GAfD,CA3BmB,CA2CnB;AAEA;;;AACA1B,EAAAA,SAAS,CAAC,MAAM;AACfa,IAAAA,QAAQ,CAACL,iBAAiB,EAAlB,CAAR;AACA,GAFQ,EAEN,CAACK,QAAD,CAFM,CAAT;AAIA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,UAAD;AACC,IAAA,KAAK,EAAEgB,KADR;AAEC,IAAA,sBAAsB,EAAEJ,sBAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAKC;AAAK,IAAA,SAAS,EAAEX,MAAM,CAACoC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAE,OAAd;AAAuBC,MAAAA,UAAU,EAAE;AAAnC,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACkBpC,SADlB,CADD,CALD,EAUC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEQ,kBAAkB,CAAC6B,MAAnB,KAA8B,CAA9B,GACExB,KAAK,CAACG,GAAN,CAAWC,IAAD,IACV,oBAAC,IAAD;AACC,IAAA,GAAG,EAAEA,IAAI,CAACI,EADX;AAEC,IAAA,IAAI,EAAEJ,IAFP;AAGC,IAAA,KAAK,EAAEJ,KAHR;AAIC,IAAA,SAAS,EAAEC,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,GASEN,kBAAkB,CAACQ,GAAnB,CAAwBC,IAAD,IACvB,oBAAC,IAAD;AACC,IAAA,GAAG,EAAEA,IAAI,CAACI,EADX;AAEC,IAAA,IAAI,EAAEJ,IAFP;AAGC,IAAA,KAAK,EAAEJ,KAHR;AAIC,IAAA,SAAS,EAAEC,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAVJ,CAVD,EA6BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEhB,MAAM,CAACwC,GAA1B;AAA+B,IAAA,OAAO,EAAEV,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD,CA7BD,CADD;AAqCA,CAvFD;;AAyFA,eAAehC,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n//Local imports\r\nimport Item from \"./Item/Item\";\r\nimport { fetch_store_items } from \"../../actions/actions\";\r\nimport { set_list_to_be_updated } from \"../../actions/actions\";\r\nimport Search_Bar from \"./Search_Bar/Search_Bar\";\r\nimport makeStyles from \"./Items_styles\";\r\n\r\nconst Items = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst styles = makeStyles();\r\n\tconst history = useHistory();\r\n\tconst list_Name = useSelector((state) => state.homePage.name); //NAME OF THE LIST THAT WE ARE GOING TO ADD ITEMS\r\n\tconst username = useSelector((state) => state.login.profileObj.email);\r\n\tconst [filtered_storeList, set_Filtered_storeList] = useState([]); //filetered items\r\n\t//LIST TO BE UPDATED\r\n\tconst [items_to_be_updated, set_ItemsToBeUpdated] = useState(\r\n\t\tuseSelector((state) => state.list_toUpdate)\r\n\t);\r\n\t//STORE ITEMS\r\n\tconst [items, set_items] = useState(\r\n\t\tuseSelector((state) =>\r\n\t\t\tstate.store_list.map((item) => {\r\n\t\t\t\titem.listId = list_Name;\r\n\t\t\t\titem.userId = username;\r\n\t\t\t\titem.count = 1;\r\n\t\t\t\titem.id = Math.random().toString(36).substr(2, 9);\r\n\t\t\t\titem.isChecked = false;\r\n\t\t\t\titem.isStoreItem = true;\r\n\t\t\t\treturn item;\r\n\t\t\t})\r\n\t\t)\r\n\t);\r\n\r\n\t// IF CHECKED ADD THE ITEMS TO THE LIST TO BE UPDATED\r\n\tconst handleAdd = () => {\r\n\t\titems.map((item) => {\r\n\t\t\tif (item.isChecked === true) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\titem.isChecked = false;\r\n\t\t\t\t\titems_to_be_updated.push(item); //push returns the new index of the array\r\n\t\t\t\t\tset_ItemsToBeUpdated(items_to_be_updated);\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t//console.log(`ITMES TO BE ADDED: ${JSON.stringify(items)}`);\r\n\t\thistory.goBack();\r\n\t\tdispatch(set_list_to_be_updated(items_to_be_updated));\r\n\t};\r\n\t//====================================================\r\n\r\n\t//FETCH STORE ITEMS\r\n\tuseEffect(() => {\r\n\t\tdispatch(fetch_store_items());\r\n\t}, [dispatch]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Search_Bar\r\n\t\t\t\titems={items}\r\n\t\t\t\tset_Filtered_storeList={set_Filtered_storeList}\r\n\t\t\t/>\r\n\t\t\t<div className={styles.text}>\r\n\t\t\t\t<Typography style={{ fontFamily: \"Inter\", fontWeight: \"600\" }}>\r\n\t\t\t\t\tAdding Items to {list_Name}\r\n\t\t\t\t</Typography>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{filtered_storeList.length === 0\r\n\t\t\t\t\t? items.map((item) => (\r\n\t\t\t\t\t\t\t<Item\r\n\t\t\t\t\t\t\t\tkey={item.id}\r\n\t\t\t\t\t\t\t\titem={item}\r\n\t\t\t\t\t\t\t\titems={items}\r\n\t\t\t\t\t\t\t\tset_items={set_items}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t  ))\r\n\t\t\t\t\t: filtered_storeList.map((item) => (\r\n\t\t\t\t\t\t\t<Item\r\n\t\t\t\t\t\t\t\tkey={item.id}\r\n\t\t\t\t\t\t\t\titem={item}\r\n\t\t\t\t\t\t\t\titems={items}\r\n\t\t\t\t\t\t\t\tset_items={set_items}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t  ))}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Button className={styles.add} onClick={handleAdd}>\r\n\t\t\t\t\tAdd Items\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Items;\r\n"]},"metadata":{},"sourceType":"module"}